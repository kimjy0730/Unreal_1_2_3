#include <iostream>
#include <vector>

using namespace std;

template <typename T>
class SimpleVector {
private:
	T* data;
	int Count = 0;
	int num1;

public:

	SimpleVector() 
	{
		num1 = 10;
		data = new T[num1]; 
	}
	SimpleVector(int capacit) 
	{
		num1 = capacit;
		data = new T[capacit];
	}

	void push_back(const T& b)
	{
		if (Count < num1)
		{
			data[Count] = b;
		    Count++;
		}
	}

	void pop_back()
	{
		if (Count > 0)
		{
			Count--;
		}
		
	}

	int size() const { return Count; }

	int capacity() const { return num1; }

	~SimpleVector() 
	{
			delete[] data; 
	}
};
	

int main() 
{
	int capacit;
	cout << "용량" << endl;
	cin >> capacit;

	SimpleVector<int>data(capacit);

	data.push_back(40);
	data.push_back(30);
	data.push_back(20);
	data.push_back(10);

	cout << "size : " << data.size() << endl;
	cout << "capacity : " << data.capacity() << endl;

	data.pop_back();
	
	data.size();

	cout << "2. size : " << data.size() << endl;

	data.capacity();

	cout << "2. capacity : " << data.capacity() << endl;


	return 0;
}